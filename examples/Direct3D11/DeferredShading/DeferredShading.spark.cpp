// Automatically generated code. Do not edit.
#include "DeferredShading.spark.h"
#pragma warning(disable: 4100)


// BasicSpark11

class _Impl_BasicSpark11 : public BasicSpark11
{
public:
	
	static void  __stdcall Initialize(
		_Impl_BasicSpark11 *self,
		ID3D11Device* device);
	
	static void  __stdcall Finalize(
		_Impl_BasicSpark11 *self);
	
	static void  __stdcall Submit(
		_Impl_BasicSpark11 *self,
		ID3D11Device* device,
		ID3D11DeviceContext* context);
public:
	ID3D11Buffer* _cb;
	ID3D11VertexShader* _VertexShader;
	ID3D11InputLayout* _inputLayout;
	ID3D11BlendState* _blendState;
	ID3D11PixelShader* _PixelShader;
};
// _Impl_BasicSpark11

void  __stdcall _Impl_BasicSpark11::Initialize(
	_Impl_BasicSpark11 *self,
	ID3D11Device* device)
{
	D3D11_BUFFER_DESC cbDesc_0 = {
	160,
	D3D11_USAGE_DYNAMIC,
	4,
	65536,
	0,
	0,
};
	self->_cb = nullptr;
	// CallCOM: ID3D11Device::CreateBuffer
	device->CreateBuffer((&(cbDesc_0)), nullptr, (&((self->_cb))));
	// D3D11 Vertex Shader
	// //spark-start-range: DeferredShading.spark(17,0)
	// struct Range { int lower; int upper; };
	// Range __Range( int lower, int upper ) { Range result; result.lower=lower; result.upper=upper; return result; }
	// struct T_RasterVertex
	// {
	// 		 float4 a___RS_Position_: SV_Position;
	// 		 float3 a_attr_178_ : USER_a_attr_178_;
	// 		 float3 a_attr_191_ : USER_a_attr_191_;
	// };
	// 
	// struct T_AssembledVertex
	// {
	// 		 float3 a_N_model_ : USER_a_N_model_;
	// 		 float3 a_P_model_ : USER_a_P_model_;
	// };
	// 
	// cbuffer Uniforms
	// {
	//  float4x4 world : packoffset(c0);
	//  float3 cameraPos : packoffset(c4);
	//  float4x4 worldViewProj : packoffset(c5);
	// }
	// T_RasterVertex main(
	//  T_AssembledVertex __ia2vs,
	//  uint VS_VertexID: SV_VertexID,
	//  uint VS_InstanceID: SV_InstanceID	)
	// {
	// float3 a_attr_85_ = (__ia2vs).a_P_model_;
	// //spark-start-range: DeferredShading.spark(63,4-65)
	// float3 a_attr_79_ = (__ia2vs).a_N_model_;
	// float4x4 a_attr_80_ = world;
	// float3x3 a_attr_81_ = ((float3x3) a_attr_80_);
	// float3 a_N_world_ = mul(a_attr_79_, a_attr_81_);
	// //spark-end-range
	// //spark-start-range: DeferredShading.spark(64,4-96)
	// float3 a_attr_83_ = cameraPos;
	// float4 a_attr_86_ = float4(a_attr_85_, 1.0000000000f);
	// float4x4 a_attr_87_ = world;
	// float4 a_attr_88_ = mul(a_attr_86_, a_attr_87_);
	// float3 a_attr_89_ = (a_attr_88_).xyz;
	// float3 a_attr_90_ = (a_attr_83_) - (a_attr_89_);
	// float3 a_viewVec_ = normalize(a_attr_90_);
	// //spark-end-range
	// float3 __c2fhelpera_attr_85_ = a_attr_85_;
	// float3 __c2fhelpera_N_world_ = a_N_world_;
	// float3 __c2fhelpera_viewVec_ = a_viewVec_;
	// //spark-start-range: Standard Library(1210,1-54)
	// //spark-end-range
	// //spark-start-range: Standard Library(1210,1-54)
	// //spark-end-range
	// float3 a_attr_164_ = __c2fhelpera_attr_85_;
	// //spark-start-range: Standard Library(1210,1-54)
	// //spark-end-range
	// //spark-start-range: Standard Library(1210,1-54)
	// //spark-end-range
	// float3 a_attr_177_ = __c2fhelpera_N_world_;
	// //spark-start-range: Standard Library(1210,1-54)
	// //spark-end-range
	// //spark-start-range: Standard Library(1210,1-54)
	// //spark-end-range
	// float3 a_attr_190_ = __c2fhelpera_viewVec_;
	// float3 __f2rhelpera_attr_164_ = a_attr_164_;
	// float3 __f2rhelpera_attr_177_ = a_attr_177_;
	// float3 __f2rhelpera_attr_190_ = a_attr_190_;
	// //spark-start-range: DeferredShading.spark(68,13-69)
	// //spark-start-range: Standard Library(1174,1-54)
	// //spark-end-range
	// //spark-start-range: Standard Library(1174,1-54)
	// //spark-end-range
	// float3 a_attr_149_ = __f2rhelpera_attr_164_;
	// float4 a_attr_150_ = float4(a_attr_149_, 1.0000000000f);
	// float4x4 a_attr_151_ = worldViewProj;
	// float4 a_RS_Position_ = mul(a_attr_150_, a_attr_151_);
	// //spark-end-range
	// //spark-start-range: DeferredShading.spark(68,13-69)
	// //spark-end-range
	// float4 a___RS_Position_ = a_RS_Position_;
	// //spark-start-range: Standard Library(1174,1-54)
	// //spark-end-range
	// //spark-start-range: Standard Library(1174,1-54)
	// //spark-end-range
	// float3 a_attr_178_ = __f2rhelpera_attr_177_;
	// //spark-start-range: Standard Library(1174,1-54)
	// //spark-end-range
	// //spark-start-range: Standard Library(1174,1-54)
	// //spark-end-range
	// float3 a_attr_191_ = __f2rhelpera_attr_190_;
	// T_RasterVertex __result = {a___RS_Position_, a_attr_178_, a_attr_191_};
	// 	return __result;
	// }
	// //spark-end-range
	
	unsigned int bytecodeSize_0 = 1528;
	static const unsigned char data_1[] = {
		0x44, 0x58, 0x42, 0x43, 0x2f, 0x8f, 0x14, 0xf6, 0x79, 0xaa, 0x68, 0xa7, 0x7d, 0xaf, 0xc0, 0x96, 0xe5, 0x2d, 0xbb, 0x03, 0x01, 0x00, 0x00, 0x00, 0xf8, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x14, 0x03, 0x00, 0x00, 0x5c, 0x05, 0x00, 0x00, 0x52, 0x44, 0x45, 0x46, 0xa4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x05, 0xfe, 0xff, 0x00, 0x09, 0x00, 0x00, 0x72, 0x01, 0x00, 0x00, 0x52, 0x44, 0x31, 0x31, 0x3c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x00, 0xab, 0xab, 0xab, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x00, 0xab, 0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x6f, 0x73, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x00, 0xab, 0xab, 0xab, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x00, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x39, 0x2e, 0x32, 0x39, 0x2e, 0x39, 0x35, 0x32, 0x2e, 0x33, 0x31, 0x31, 0x31, 0x00, 0xab, 0x49, 0x53, 0x47, 0x4e, 0xa4, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x61, 0x5f, 0x4e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x00, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x61, 0x5f, 0x50, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x00, 0x53, 0x56, 0x5f, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x49, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x00, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x31, 0x37, 0x38, 0x5f, 0x00, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x31, 0x39, 0x31, 0x5f, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x40, 0x02, 0x00, 0x00, 0x50, 0x00, 0x01, 0x00, 0x90, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x04, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x72, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x72, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x42, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x53, 0x54, 0x41, 0x54, 0x94, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	};
	const unsigned char* bytecode_2 = data_1;
	self->_VertexShader = nullptr;
	// CallCOM: ID3D11Device::CreateVertexShader
	device->CreateVertexShader(bytecode_2, bytecodeSize_0, nullptr, (&((self->_VertexShader))));
	// D3D11 Input Assembler
	D3D11_INPUT_ELEMENT_DESC inputElementDescs_3[] = {
	{
	"USER_a_N_model_",
	0,
	DXGI_FORMAT_R32G32B32_FLOAT,
	0,
	12,
	D3D11_INPUT_PER_VERTEX_DATA,
	0,
},
	{
	"USER_a_P_model_",
	0,
	DXGI_FORMAT_R32G32B32_FLOAT,
	0,
	0,
	D3D11_INPUT_PER_VERTEX_DATA,
	0,
},
};
	self->_inputLayout = nullptr;
	// CallCOM: ID3D11Device::CreateInputLayout
	device->CreateInputLayout(inputElementDescs_3, 2, bytecode_2, bytecodeSize_0, (&((self->_inputLayout))));
	// D3D11 Hull Shader
	// D3D11 Domain Shader
	// D3D11 Geometry Shader
	// D3D11 Output Merger
	D3D11_BLEND_DESC blendDesc_4 = {
	false,
	true,
	{
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
	{
	false,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	D3D11_BLEND_ONE,
	D3D11_BLEND_ZERO,
	D3D11_BLEND_OP_ADD,
	15,
},
},
};
	self->_blendState = nullptr;
	// CallCOM: ID3D11Device::CreateBlendState
	device->CreateBlendState((&(blendDesc_4)), (&((self->_blendState))));
	// D3D11 Pixel Shader
	// //spark-start-range: DeferredShading.spark(17,0)
	// struct Range { int lower; int upper; };
	// Range __Range( int lower, int upper ) { Range result; result.lower=lower; result.upper=upper; return result; }
	// struct T_RasterVertex
	// {
	// 		 float4 a___RS_Position_: SV_Position;
	// 		 float3 a_attr_178_ : USER_a_attr_178_;
	// 		 float3 a_attr_191_ : USER_a_attr_191_;
	// };
	// 
	// cbuffer Uniforms
	// {
	//  float4x4 world : packoffset(c0);
	//  float3 cameraPos : packoffset(c4);
	//  float4x4 worldViewProj : packoffset(c5);
	//  float3 lightDir : packoffset(c9);
	// }
	// void main(
	//  T_RasterVertex __rv2f,
	// 	out float4 target0 : SV_Target0 )
	// {
	// //spark-start-range: DeferredShading.spark(88,4)
	// float3 a_attr_119_ = (__rv2f).a_attr_178_;
	// float3 a_attr_120_ = normalize(a_attr_119_);
	// //spark-start-range: DeferredShading.spark(59,4-57)
	// float3 a_attr_76_ = lightDir;
	// float3 a_vLightDirNorm_ = normalize(a_attr_76_);
	// //spark-end-range
	// //spark-start-range: DeferredShading.spark(59,4-57)
	// //spark-end-range
	// float3 a_attr_126_ = (__rv2f).a_attr_191_;
	// float3 a_attr_127_ = normalize(a_attr_126_);
	// //spark-start-range: DeferredShading.spark(59,4-57)
	// //spark-end-range
	// float _t = dot(a_attr_120_, a_vLightDirNorm_);
	// float _t_0 = saturate(_t);
	// float _t_1 = (2.0000000000f) * (_t_0);
	// float3 _t_2 = (_t_1) * (a_attr_120_);
	// //spark-start-range: DeferredShading.spark(59,4-57)
	// //spark-end-range
	// float3 _t_3 = (_t_2) - (a_vLightDirNorm_);
	// float _t_4 = dot(a_attr_127_, _t_3);
	// float _t_5 = saturate(_t_4);
	// float _t_6 = pow(_t_5, 2.0000000000f);
	// float4 _t_7 = ((float4) _t_6);
	// float4 _t_8 = float4(1.0000000000f, 1.0000000000f, 1.0000000000f, 1.0000000000f);
	// float4 _t_9 = _t_8;
	// float4 _t_10 = (_t_7) * (_t_9);
	// float4 a_attr_74_ = float4(1.0000000000f, 1.0000000000f, 1.0000000000f, 1.0000000000f);
	// float4 _t_11 = (0.1000000000f) * (a_attr_74_);
	// float4 _t_12 = _t_11;
	// float4 _t_13 = (_t_10) * (_t_12);
	// float4 a_color_ = _t_13;
	// //spark-end-range
	// float4 __ps2oma_color_ = a_color_;
	// //spark-start-range: DeferredShading.spark(88,4)
	// //spark-end-range
	// 	target0 = a_color_;
	// }
	// //spark-end-range
	
	unsigned int bytecodeSize_5 = 1388;
	static const unsigned char data_6[] = {
		0x44, 0x58, 0x42, 0x43, 0x4b, 0xf2, 0x36, 0xf9, 0x9b, 0x20, 0xaf, 0x0d, 0xb1, 0x9d, 0xbf, 0xfa, 0x9d, 0x9e, 0x82, 0x1f, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0xd0, 0x04, 0x00, 0x00, 0x52, 0x44, 0x45, 0x46, 0xd4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x05, 0xff, 0xff, 0x00, 0x09, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x52, 0x44, 0x31, 0x31, 0x3c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x00, 0xab, 0xab, 0xab, 0x5c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x00, 0xab, 0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x6f, 0x73, 0x00, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x00, 0xab, 0xab, 0xab, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x00, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x00, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x39, 0x2e, 0x32, 0x39, 0x2e, 0x39, 0x35, 0x32, 0x2e, 0x33, 0x31, 0x31, 0x31, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x31, 0x37, 0x38, 0x5f, 0x00, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x31, 0x39, 0x31, 0x5f, 0x00, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xfc, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x09, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xcd, 0xcc, 0xcc, 0x3d, 0xcd, 0xcc, 0xcc, 0x3d, 0xcd, 0xcc, 0xcc, 0x3d, 0xcd, 0xcc, 0xcc, 0x3d, 0x3e, 0x00, 0x00, 0x01, 0x53, 0x54, 0x41, 0x54, 0x94, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	};
	const unsigned char* bytecode_7 = data_6;
	self->_PixelShader = nullptr;
	// CallCOM: ID3D11Device::CreatePixelShader
	device->CreatePixelShader(bytecode_7, bytecodeSize_5, nullptr, (&((self->_PixelShader))));
}

void  __stdcall _Impl_BasicSpark11::Finalize(
	_Impl_BasicSpark11 *self)
{
	// CallCOM: ID3D11Buffer::Release
	(self->_cb)->Release();
	// CallCOM: IUnknown::Release
	(self->_VertexShader)->Release();
	// CallCOM: IUnknown::Release
	(self->_inputLayout)->Release();
	// CallCOM: IUnknown::Release
	(self->_blendState)->Release();
	// CallCOM: IUnknown::Release
	(self->_PixelShader)->Release();
}

void  __stdcall _Impl_BasicSpark11::Submit(
	_Impl_BasicSpark11 *self,
	ID3D11Device* device,
	ID3D11DeviceContext* context)
{
	D3D11_MAPPED_SUBRESOURCE _cbMapped_0;
	// CallCOM: ID3D11DeviceContext::Map
	context->Map((self->_cb), 0, D3D11_MAP_WRITE_DISCARD, 0, (&(_cbMapped_0)));
	unsigned char *cbMappedData_1 = ((unsigned char *) (_cbMapped_0.pData));
	*((spark::float4x4 *) ((cbMappedData_1) + (0))) = (self->m_world);
	*((spark::float3 *) ((cbMappedData_1) + (64))) = (self->m_cameraPos);
	spark::float4x4 viewProj_2 = ((self->m_view) * (self->m_proj));
	spark::float4x4 worldViewProj_3 = ((self->m_world) * viewProj_2);
	*((spark::float4x4 *) ((cbMappedData_1) + (80))) = worldViewProj_3;
	*((spark::float3 *) ((cbMappedData_1) + (144))) = (self->m_lightDir);
	// CallCOM: ID3D11DeviceContext::Unmap
	context->Unmap((self->_cb), 0);
	// D3D11 Output Merger
	ID3D11RenderTargetView* renderTargetViews_0[] = {
	(self->m_myTarget),
};
	// CallCOM: ID3D11DeviceContext::OMSetRenderTargets
	context->OMSetRenderTargets(1, renderTargetViews_0, (self->m_depthStencilView));
	float blendFactor_1[] = {
	((float)1),
	((float)1),
	((float)1),
	((float)1),
};
	// CallCOM: ID3D11DeviceContext::OMSetBlendState
	context->OMSetBlendState((self->_blendState), blendFactor_1, 4294967295);
	// D3D11 Input Assembler
	spark::d3d11::DrawSpan IA_DrawSpan_2 = (self->m_myDrawSpan);
	IA_DrawSpan_2.Bind(context);
	// CallCOM: ID3D11DeviceContext::IASetInputLayout
	context->IASetInputLayout((self->_inputLayout));
	ID3D11Buffer* attr$65_3 = ((self->m_myVertexStream)).buffer;
	ID3D11Buffer* inputVertexBuffers_4[] = {
	attr$65_3,
};
	UINT attr$67_5 = ((self->m_myVertexStream)).stride;
	UINT inputVertexBufferStrides_6[] = {
	attr$67_5,
};
	UINT attr$66_7 = ((self->m_myVertexStream)).offset;
	UINT inputVertexBufferOffsets_8[] = {
	attr$66_7,
};
	// CallCOM: ID3D11DeviceContext::IASetVertexBuffers
	context->IASetVertexBuffers(0, 1, inputVertexBuffers_4, inputVertexBufferStrides_6, inputVertexBufferOffsets_8);
	// D3D11 Vertex Shader
	// CallCOM: ID3D11DeviceContext::VSSetShader
	context->VSSetShader((self->_VertexShader), nullptr, 0);
	// CallCOM: ID3D11DeviceContext::VSSetConstantBuffers
	context->VSSetConstantBuffers(0, 1, (&((self->_cb))));
	// D3D11 Hull Shader
	// CallCOM: ID3D11DeviceContext::HSSetShader
	context->HSSetShader(nullptr, nullptr, 0);
	// D3D11 Domain Shader
	// CallCOM: ID3D11DeviceContext::DSSetShader
	context->DSSetShader(nullptr, nullptr, 0);
	// D3D11 Geometry Shader
	// CallCOM: ID3D11DeviceContext::GSSetShader
	context->GSSetShader(nullptr, nullptr, 0);
	// D3D11 Pixel Shader
	// CallCOM: ID3D11DeviceContext::PSSetShader
	context->PSSetShader((self->_PixelShader), nullptr, 0);
	// CallCOM: ID3D11DeviceContext::PSSetConstantBuffers
	context->PSSetConstantBuffers(0, 1, (&((self->_cb))));
	IA_DrawSpan_2.Submit(context);
}
struct {
	const char* _m0;
	unsigned int _m1;
	const char* _m2;
	unsigned int _m3;
} _spark_global_0 = {
"BasicSpark11",
0,
"spark::d3d11::D3D11DrawPass",
0 };
struct {
	unsigned int _m0;
	unsigned int _m1;
	void *_m2;
	void* _m3;
	void* _m4;
	void* _m5;
} _spark_global_BasicSpark111 = {
344,
2,
(&(_spark_global_0)),
reinterpret_cast<void*>(&(_Impl_BasicSpark11::Initialize)),
reinterpret_cast<void*>(&(_Impl_BasicSpark11::Finalize)),
reinterpret_cast<void*>(&(_Impl_BasicSpark11::Submit)) };
const spark::ShaderClassDesc* BasicSpark11::GetShaderClassDesc() { return reinterpret_cast<const spark::ShaderClassDesc*>(&(_spark_global_BasicSpark111)); }
