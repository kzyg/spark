// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  OBL-CEDAR
// DateTime: 11/8/2011 12:08:51 PM
// UserName: tfoley
// Input file <Parser.y>

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Spark;
using Spark.AbstractSyntax;

namespace Spark.Parser.Generated
{
public enum Tokens {
    error=127,EOF=128,TOK_ABSTRACT=129,TOK_CASE=130,TOK_CLASS=131,TOK_CONCEPT=132,
    TOK_CONCRETE=133,TOK_ELEMENT=134,TOK_EXTENDS=135,TOK_FALSE=136,TOK_FINAL=137,TOK_FOR=138,
    TOK_IF=139,TOK_IMPLICIT=140,TOK_IN=141,TOK_INPUT=142,TOK_LET=143,TOK_METHOD=144,
    TOK_MIXIN=145,TOK_NAMESPACE=146,TOK_NEW=147,TOK_OPERATOR=148,TOK_OPTIONAL=149,TOK_OUTPUT=150,
    TOK_OVERRIDE=151,TOK_PRIMARY=152,TOK_RETURN=153,TOK_RETURNS=154,TOK_SEALED=155,TOK_SHADER=156,
    TOK_STRUCT=157,TOK_SWITCH=158,TOK_TRUE=159,TOK_TYPE=160,TOK_USING=161,TOK_VAR=162,
    TOK_VIRTUAL=163,TOK_VOID=164,TOK_WHERE=165,TOK_FLOAT_LITERAL=166,TOK_IDENTIFIER=167,TOK_INTEGER_LITERAL=168,
    TOK_STRING_LITERAL=169,TOK_EQUALEQUAL=170,TOK_GREATEREQUAL=171,TOK_LESSEQUAL=172,TOK_NOTEQUAL=173,TOK_SHIFT_LEFT=174,
    TOK_SHIFT_RIGHT=175,TOK_ADDEQUAL=176,TOK_SUBEQUAL=177,TOK_MULEQUAL=178,TOK_DIVEQUAL=179,TOK_ANDEQUAL=180,
    TOK_OREQUAL=181,TOK_SCOPE=182};

public struct ValueType
#line 104 "Parser.y"
{ public Int64 intVal;
#line 105 "Parser.y"
         public Double floatVal;
#line 106 "Parser.y"
         public string stringVal;
#line 107 "Parser.y"
         public AbsSourceRecord sourceRecordVal;
#line 108 "Parser.y"
         public List<AbsGlobalDecl> globalDeclListVal;
#line 109 "Parser.y"
         public AbsGlobalDecl globalDeclVal;
#line 110 "Parser.y"
         public Identifier identifierVal;
#line 111 "Parser.y"
         public List<AbsMemberDecl> memberDeclListVal;
#line 112 "Parser.y"
         public AbsMemberDecl memberDeclVal;
#line 113 "Parser.y"
         public List<AbsTerm> termListVal;
#line 114 "Parser.y"
         public AbsTerm termVal;
#line 115 "Parser.y"
         public List<AbsArg> argListVal;
#line 116 "Parser.y"
         public AbsArg argVal;
#line 117 "Parser.y"
         public List<AbsParamDecl> paramListVal;
#line 118 "Parser.y"
         public AbsParamDecl paramVal;
#line 119 "Parser.y"
         public List<AbsStmt> stmtListVal;
#line 120 "Parser.y"
         public AbsStmt stmtVal;
#line 121 "Parser.y"
         public List<AbsGenericParamDecl> genericParamListVal;
#line 122 "Parser.y"
         public AbsGenericParamDecl genericParamVal;
#line 123 "Parser.y"
         public AbsAttribute attributeVal;
#line 124 "Parser.y"
         public AbsCase caseVal;
#line 125 "Parser.y"
         public List<AbsCase> caseListVal;
#line 126 "Parser.y"
		 public AbsConceptDecl conceptDeclVal; }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,SourceRange> {
  private SourceRange __yylloc = new SourceRange();
  public override SourceRange yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, SourceRange>
{
#line 23 "Parser.y"

#line 24 "Parser.y"
    public Parser(AbstractScanner<ValueType, SourceRange> scanner)
#line 25 "Parser.y"
        : base(scanner)
#line 26 "Parser.y"
    {
#line 27 "Parser.y"
    }
#line 28 "Parser.y"

#line 29 "Parser.y"
    public Spark.Parser.Generated.Scanner frogScanner {
#line 30 "Parser.y"
        get { return (Spark.Parser.Generated.Scanner) this.Scanner; }
#line 31 "Parser.y"
    }
#line 32 "Parser.y"

#line 33 "Parser.y"
    public AbsSyntaxInfo info(
#line 34 "Parser.y"
	    SourceRange range )
#line 35 "Parser.y"
    {
#line 36 "Parser.y"
        return frogScanner.info(range);
#line 37 "Parser.y"
    }
#line 38 "Parser.y"

#line 39 "Parser.y"
	public void Tag(
#line 40 "Parser.y"
		SourceRange range,
#line 41 "Parser.y"
		TokenType type )
#line 42 "Parser.y"
	{
#line 43 "Parser.y"
	    frogScanner.Tag(range, type);
#line 44 "Parser.y"
	}
#line 45 "Parser.y"
    
#line 46 "Parser.y"
    public IdentifierFactory identifierFactory
#line 47 "Parser.y"
    {
#line 48 "Parser.y"
        get { return frogScanner.identifierFactory; }
#line 49 "Parser.y"
    }
#line 50 "Parser.y"

#line 51 "Parser.y"
    private Identifier Op(
#line 52 "Parser.y"
        string operatorName )
#line 53 "Parser.y"
    {
#line 54 "Parser.y"
        return identifierFactory.operatorIdentifier( operatorName );
#line 55 "Parser.y"
    }
#line 56 "Parser.y"

#line 57 "Parser.y"
    private AbsTerm BinOp(
#line 58 "Parser.y"
	    AbsSyntaxInfo info,
#line 59 "Parser.y"
		AbsTerm left,
#line 60 "Parser.y"
		Identifier op,
#line 61 "Parser.y"
		AbsTerm right )
#line 62 "Parser.y"
	{
#line 63 "Parser.y"
	    return new AbsApp(info,
#line 64 "Parser.y"
			new AbsVarRef(info, op), // \todo: tighter token range on the op?
#line 65 "Parser.y"
			new AbsArg[]{
#line 66 "Parser.y"
				new AbsPositionalArg(left.Info, left),
#line 67 "Parser.y"
				new AbsPositionalArg(right.Info, right) } );
#line 68 "Parser.y"
	}
#line 69 "Parser.y"

#line 70 "Parser.y"
    private AbsTerm BinOp(
#line 71 "Parser.y"
	    AbsSyntaxInfo info,
#line 72 "Parser.y"
		AbsTerm left,
#line 73 "Parser.y"
		string op,
#line 74 "Parser.y"
		AbsTerm right )
#line 75 "Parser.y"
	{
#line 76 "Parser.y"
	    return BinOp(info, left, Op(op), right);
#line 77 "Parser.y"
	}
#line 78 "Parser.y"

#line 79 "Parser.y"
    private AbsTerm UnOp(
#line 80 "Parser.y"
	    AbsSyntaxInfo info,
#line 81 "Parser.y"
		Identifier op,
#line 82 "Parser.y"
		AbsTerm arg )
#line 83 "Parser.y"
	{
#line 84 "Parser.y"
	    return new AbsApp(info,
#line 85 "Parser.y"
			new AbsVarRef(info, op), // \todo: tighter token range on the op?
#line 86 "Parser.y"
			new AbsArg[]{
#line 87 "Parser.y"
				new AbsPositionalArg(arg.Info, arg) } );
#line 88 "Parser.y"
	}
#line 89 "Parser.y"

#line 90 "Parser.y"
    private AbsTerm UnOp(
#line 91 "Parser.y"
	    AbsSyntaxInfo info,
#line 92 "Parser.y"
		string op,
#line 93 "Parser.y"
		AbsTerm arg )
#line 94 "Parser.y"
	{
#line 95 "Parser.y"
	    return UnOp(info, Op(op), arg);
#line 96 "Parser.y"
	}
#line 97 "Parser.y"

#line 98 "Parser.y"
    private AbsSourceRecord _result = null;
#line 99 "Parser.y"

#line 100 "Parser.y"
    public AbsSourceRecord result { get { return _result; } }
#line 101 "Parser.y"

#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

  protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(307);
    AddState(0,new State(-4,new int[]{-65,1,-1,3,-2,4}));
    AddState(1,new State(new int[]{128,2}));
    AddState(2,new State(-1));
    AddState(3,new State(-2));
    AddState(4,new State(new int[]{156,7,129,301,145,303,152,305,128,-3},new int[]{-3,5,-4,6}));
    AddState(5,new State(-5));
    AddState(6,new State(-6));
    AddState(7,new State(new int[]{131,8}));
    AddState(8,new State(new int[]{167,19,148,20},new int[]{-33,9}));
    AddState(9,new State(new int[]{135,296,123,-22},new int[]{-18,10}));
    AddState(10,new State(new int[]{123,11}));
    AddState(11,new State(-24,new int[]{-11,12}));
    AddState(12,new State(new int[]{125,13,134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,14,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(13,new State(-7));
    AddState(14,new State(-25));
    AddState(15,new State(-26));
    AddState(16,new State(new int[]{167,19,148,20},new int[]{-33,17}));
    AddState(17,new State(new int[]{59,18}));
    AddState(18,new State(-45));
    AddState(19,new State(-159));
    AddState(20,new State(new int[]{43,21,45,22,42,23,47,24,37,25,60,26,62,27,172,28,171,29,174,30,175,31,170,32,173,33,38,34,124,35,33,36,40,37}));
    AddState(21,new State(-160));
    AddState(22,new State(-161));
    AddState(23,new State(-162));
    AddState(24,new State(-163));
    AddState(25,new State(-164));
    AddState(26,new State(-165));
    AddState(27,new State(-166));
    AddState(28,new State(-167));
    AddState(29,new State(-168));
    AddState(30,new State(-169));
    AddState(31,new State(-170));
    AddState(32,new State(-171));
    AddState(33,new State(-172));
    AddState(34,new State(-173));
    AddState(35,new State(-174));
    AddState(36,new State(-175));
    AddState(37,new State(new int[]{41,40,167,19,148,20},new int[]{-33,38}));
    AddState(38,new State(new int[]{41,39}));
    AddState(39,new State(-176));
    AddState(40,new State(-177));
    AddState(41,new State(-27));
    AddState(42,new State(new int[]{167,19,148,20},new int[]{-33,43}));
    AddState(43,new State(new int[]{61,218,176,222,177,223,178,224,179,225,180,226,181,227,91,228,59,-48,40,-12},new int[]{-25,44,-8,46,-62,220}));
    AddState(44,new State(new int[]{59,45}));
    AddState(45,new State(-46));
    AddState(46,new State(new int[]{40,47}));
    AddState(47,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,41,-59},new int[]{-15,48,-16,212,-17,217,-24,215,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(48,new State(new int[]{41,49}));
    AddState(49,new State(new int[]{59,51,123,53},new int[]{-28,50,-30,52}));
    AddState(50,new State(-58));
    AddState(51,new State(-64));
    AddState(52,new State(-65));
    AddState(53,new State(-74,new int[]{-31,54}));
    AddState(54,new State(new int[]{125,55,123,53,59,58,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,40,140,45,145,126,146,33,147,153,164,143,173,162,178,158,188,139,200,138,205},new int[]{-29,56,-30,57,-26,59,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,163,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143,-24,168}));
    AddState(55,new State(-91));
    AddState(56,new State(-75));
    AddState(57,new State(-76));
    AddState(58,new State(-77));
    AddState(59,new State(new int[]{59,60}));
    AddState(60,new State(-78));
    AddState(61,new State(-99));
    AddState(62,new State(-100));
    AddState(63,new State(new int[]{63,64,59,-103,58,-103,44,-103,41,-103}));
    AddState(64,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,65,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(65,new State(new int[]{58,66}));
    AddState(66,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-38,67,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(67,new State(-104));
    AddState(68,new State(-105));
    AddState(69,new State(new int[]{124,70,63,-106,59,-106,58,-106,44,-106,41,-106}));
    AddState(70,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-42,71,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(71,new State(new int[]{94,72,124,-108,63,-108,59,-108,58,-108,44,-108,41,-108}));
    AddState(72,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-43,73,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(73,new State(new int[]{38,74,94,-110,124,-110,63,-110,59,-110,58,-110,44,-110,41,-110}));
    AddState(74,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-44,75,-45,101,-46,106,-47,109,-48,112,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(75,new State(new int[]{170,99,173,100,38,-112,94,-112,124,-112,63,-112,59,-112,58,-112,44,-112,41,-112},new int[]{-56,76}));
    AddState(76,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-45,77,-46,106,-47,109,-48,112,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(77,new State(new int[]{60,102,62,103,172,104,171,105,170,-114,173,-114,38,-114,94,-114,124,-114,63,-114,59,-114,58,-114,44,-114,41,-114},new int[]{-57,78}));
    AddState(78,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-46,79,-47,109,-48,112,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(79,new State(new int[]{174,107,175,108,60,-118,62,-118,172,-118,171,-118,170,-118,173,-118,38,-118,94,-118,124,-118,63,-118,59,-118,58,-118,44,-118,41,-118},new int[]{-58,80}));
    AddState(80,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-47,81,-48,112,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(81,new State(new int[]{43,110,45,111,174,-124,175,-124,60,-124,62,-124,172,-124,171,-124,170,-124,173,-124,38,-124,94,-124,124,-124,63,-124,59,-124,58,-124,44,-124,41,-124},new int[]{-59,82}));
    AddState(82,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-48,83,-49,116,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(83,new State(new int[]{42,113,47,114,37,115,43,-128,45,-128,174,-128,175,-128,60,-128,62,-128,172,-128,171,-128,170,-128,173,-128,38,-128,94,-128,124,-128,63,-128,59,-128,58,-128,44,-128,41,-128},new int[]{-60,84}));
    AddState(84,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-49,85,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(85,new State(-132));
    AddState(86,new State(-136));
    AddState(87,new State(-137));
    AddState(88,new State(new int[]{40,89,91,150,46,157,61,-142,64,-142,42,-142,47,-142,37,-142,43,-142,45,-142,174,-142,175,-142,60,-142,62,-142,172,-142,171,-142,170,-142,173,-142,38,-142,94,-142,124,-142,63,-142,58,-142,59,-142,44,-142,41,-142}));
    AddState(89,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147,41,-92},new int[]{-20,90,-21,92,-22,136,-26,95,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,137,-54,123,-32,126,-61,143}));
    AddState(90,new State(new int[]{41,91}));
    AddState(91,new State(-145));
    AddState(92,new State(new int[]{44,93,41,-93}));
    AddState(93,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147,41,-94},new int[]{-22,94,-26,95,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,137,-54,123,-32,126,-61,143}));
    AddState(94,new State(-96));
    AddState(95,new State(-97));
    AddState(96,new State(new int[]{94,72,124,-107,63,-107,59,-107,58,-107,44,-107,41,-107}));
    AddState(97,new State(new int[]{38,74,94,-109,124,-109,63,-109,59,-109,58,-109,44,-109,41,-109}));
    AddState(98,new State(new int[]{170,99,173,100,38,-111,94,-111,124,-111,63,-111,59,-111,58,-111,44,-111,41,-111},new int[]{-56,76}));
    AddState(99,new State(-115));
    AddState(100,new State(-116));
    AddState(101,new State(new int[]{60,102,62,103,172,104,171,105,170,-113,173,-113,38,-113,94,-113,124,-113,63,-113,59,-113,58,-113,44,-113,41,-113},new int[]{-57,78}));
    AddState(102,new State(-119));
    AddState(103,new State(-120));
    AddState(104,new State(-121));
    AddState(105,new State(-122));
    AddState(106,new State(new int[]{174,107,175,108,60,-117,62,-117,172,-117,171,-117,170,-117,173,-117,38,-117,94,-117,124,-117,63,-117,59,-117,58,-117,44,-117,41,-117},new int[]{-58,80}));
    AddState(107,new State(-125));
    AddState(108,new State(-126));
    AddState(109,new State(new int[]{43,110,45,111,174,-123,175,-123,60,-123,62,-123,172,-123,171,-123,170,-123,173,-123,38,-123,94,-123,124,-123,63,-123,59,-123,58,-123,44,-123,41,-123},new int[]{-59,82}));
    AddState(110,new State(-129));
    AddState(111,new State(-130));
    AddState(112,new State(new int[]{42,113,47,114,37,115,43,-127,45,-127,174,-127,175,-127,60,-127,62,-127,172,-127,171,-127,170,-127,173,-127,38,-127,94,-127,124,-127,63,-127,59,-127,58,-127,44,-127,41,-127},new int[]{-60,84}));
    AddState(113,new State(-133));
    AddState(114,new State(-134));
    AddState(115,new State(-135));
    AddState(116,new State(-131));
    AddState(117,new State(new int[]{61,118,64,148,42,-136,47,-136,37,-136,43,-136,45,-136,174,-136,175,-136,60,-136,62,-136,172,-136,171,-136,170,-136,173,-136,38,-136,94,-136,124,-136,63,-136,59,-136,58,-136,44,-136,41,-136}));
    AddState(118,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-37,119,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(119,new State(-101));
    AddState(120,new State(-144));
    AddState(121,new State(-149));
    AddState(122,new State(-151));
    AddState(123,new State(-150));
    AddState(124,new State(-152));
    AddState(125,new State(-153));
    AddState(126,new State(-154));
    AddState(127,new State(-158));
    AddState(128,new State(-155));
    AddState(129,new State(-156));
    AddState(130,new State(-157));
    AddState(131,new State(new int[]{167,19,148,20},new int[]{-55,132,-33,122}));
    AddState(132,new State(new int[]{40,133}));
    AddState(133,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147,41,-92},new int[]{-20,134,-21,92,-22,136,-26,95,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,137,-54,123,-32,126,-61,143}));
    AddState(134,new State(new int[]{41,135}));
    AddState(135,new State(-146));
    AddState(136,new State(-95));
    AddState(137,new State(new int[]{58,138,40,-151,91,-151,46,-151,61,-151,64,-151,42,-151,47,-151,37,-151,43,-151,45,-151,174,-151,175,-151,60,-151,62,-151,172,-151,171,-151,170,-151,173,-151,38,-151,94,-151,124,-151,63,-151,44,-151,41,-151}));
    AddState(138,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,139,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(139,new State(-98));
    AddState(140,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,141,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(141,new State(new int[]{41,142}));
    AddState(142,new State(-143));
    AddState(143,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-49,144,-50,86,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(144,new State(-138));
    AddState(145,new State(-139));
    AddState(146,new State(-140));
    AddState(147,new State(-141));
    AddState(148,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-37,149,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(149,new State(-102));
    AddState(150,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159},new int[]{-27,151,-23,162,-24,155,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(151,new State(new int[]{93,152,44,153}));
    AddState(152,new State(-147));
    AddState(153,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159},new int[]{-23,154,-24,155,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(154,new State(-71));
    AddState(155,new State(-72));
    AddState(156,new State(new int[]{40,89,91,150,46,157,167,-68,148,-68,93,-68,44,-68,127,-68,123,-68}));
    AddState(157,new State(new int[]{167,19,148,20},new int[]{-33,158}));
    AddState(158,new State(-148));
    AddState(159,new State(new int[]{167,19,148,20},new int[]{-55,160,-33,122}));
    AddState(160,new State(new int[]{40,133,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131},new int[]{-52,161,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(161,new State(new int[]{40,89,91,150,46,157,167,-69,148,-69,93,-69,44,-69,127,-69,123,-69}));
    AddState(162,new State(-70));
    AddState(163,new State(new int[]{40,89,91,150,46,157,61,-142,64,-142,42,-142,47,-142,37,-142,43,-142,45,-142,174,-142,175,-142,60,-142,62,-142,172,-142,171,-142,170,-142,173,-142,38,-142,94,-142,124,-142,63,-142,59,-142,167,-68,148,-68}));
    AddState(164,new State(new int[]{59,165,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,166,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(165,new State(-79));
    AddState(166,new State(new int[]{59,167}));
    AddState(167,new State(-80));
    AddState(168,new State(new int[]{167,19,148,20},new int[]{-33,169}));
    AddState(169,new State(new int[]{61,170}));
    AddState(170,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,171,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(171,new State(new int[]{59,172}));
    AddState(172,new State(-81));
    AddState(173,new State(new int[]{167,19,148,20},new int[]{-33,174}));
    AddState(174,new State(new int[]{61,175}));
    AddState(175,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,176,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(176,new State(new int[]{59,177}));
    AddState(177,new State(-82));
    AddState(178,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159},new int[]{-33,179,-24,183,-52,156,-53,120,-55,121,-54,123,-32,126}));
    AddState(179,new State(new int[]{61,180,40,-151,91,-151,46,-151,167,-151,148,-151}));
    AddState(180,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,181,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(181,new State(new int[]{59,182}));
    AddState(182,new State(-83));
    AddState(183,new State(new int[]{167,19,148,20},new int[]{-33,184}));
    AddState(184,new State(new int[]{61,185}));
    AddState(185,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,186,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(186,new State(new int[]{59,187}));
    AddState(187,new State(-84));
    AddState(188,new State(new int[]{40,189}));
    AddState(189,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,190,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(190,new State(new int[]{41,191}));
    AddState(191,new State(new int[]{123,192}));
    AddState(192,new State(-88,new int[]{-64,193}));
    AddState(193,new State(new int[]{125,194,130,196},new int[]{-63,195}));
    AddState(194,new State(-85));
    AddState(195,new State(-89));
    AddState(196,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,197,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(197,new State(new int[]{58,198}));
    AddState(198,new State(new int[]{123,53,59,58,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,40,140,45,145,126,146,33,147,153,164,143,173,162,178,158,188,139,200,138,205},new int[]{-29,199,-30,57,-26,59,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,163,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143,-24,168}));
    AddState(199,new State(-90));
    AddState(200,new State(new int[]{40,201}));
    AddState(201,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,202,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(202,new State(new int[]{41,203}));
    AddState(203,new State(new int[]{123,53,59,58,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,40,140,45,145,126,146,33,147,153,164,143,173,162,178,158,188,139,200,138,205},new int[]{-29,204,-30,57,-26,59,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,163,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143,-24,168}));
    AddState(204,new State(-86));
    AddState(205,new State(new int[]{40,206}));
    AddState(206,new State(new int[]{167,19,148,20},new int[]{-33,207}));
    AddState(207,new State(new int[]{141,208}));
    AddState(208,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,209,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(209,new State(new int[]{41,210}));
    AddState(210,new State(new int[]{123,53,59,58,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,40,140,45,145,126,146,33,147,153,164,143,173,162,178,158,188,139,200,138,205},new int[]{-29,211,-30,57,-26,59,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,163,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143,-24,168}));
    AddState(211,new State(-87));
    AddState(212,new State(new int[]{44,213,41,-60}));
    AddState(213,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159},new int[]{-17,214,-24,215,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(214,new State(-62));
    AddState(215,new State(new int[]{167,19,148,20},new int[]{-33,216}));
    AddState(216,new State(-63));
    AddState(217,new State(-61));
    AddState(218,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,219,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(219,new State(-49));
    AddState(220,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147},new int[]{-26,221,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,122,-54,123,-32,126,-61,143}));
    AddState(221,new State(-50));
    AddState(222,new State(-51));
    AddState(223,new State(-52));
    AddState(224,new State(-53));
    AddState(225,new State(-54));
    AddState(226,new State(-55));
    AddState(227,new State(-56));
    AddState(228,new State(new int[]{127,242,160,235,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,140,239},new int[]{-9,229,-10,244,-24,237,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(229,new State(new int[]{93,230,127,231,44,233}));
    AddState(230,new State(-13));
    AddState(231,new State(new int[]{93,232}));
    AddState(232,new State(-14));
    AddState(233,new State(new int[]{160,235,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,140,239},new int[]{-10,234,-24,237,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(234,new State(-17));
    AddState(235,new State(new int[]{167,19,148,20},new int[]{-33,236}));
    AddState(236,new State(-18));
    AddState(237,new State(new int[]{167,19,148,20},new int[]{-33,238}));
    AddState(238,new State(-19));
    AddState(239,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159},new int[]{-24,240,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(240,new State(new int[]{167,19,148,20,93,-21,127,-21,44,-21},new int[]{-33,241}));
    AddState(241,new State(-20));
    AddState(242,new State(new int[]{93,243}));
    AddState(243,new State(-15));
    AddState(244,new State(-16));
    AddState(245,new State(new int[]{61,218,176,222,177,223,178,224,179,225,180,226,181,227,40,-151,91,-151,46,-151,167,-151,148,-151,59,-48},new int[]{-25,246,-62,220}));
    AddState(246,new State(new int[]{59,247}));
    AddState(247,new State(-47));
    AddState(248,new State(-28));
    AddState(249,new State(-29));
    AddState(250,new State(new int[]{167,19,148,20},new int[]{-33,251}));
    AddState(251,new State(new int[]{91,228,123,-12},new int[]{-8,252}));
    AddState(252,new State(new int[]{123,253}));
    AddState(253,new State(-24,new int[]{-11,254}));
    AddState(254,new State(new int[]{125,255,134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,14,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(255,new State(-57));
    AddState(256,new State(-30));
    AddState(257,new State(new int[]{167,19,148,20},new int[]{-33,258}));
    AddState(258,new State(new int[]{91,228,59,-12},new int[]{-8,259}));
    AddState(259,new State(new int[]{59,260}));
    AddState(260,new State(-11));
    AddState(261,new State(-31));
    AddState(262,new State(new int[]{167,19,148,20},new int[]{-33,263}));
    AddState(263,new State(new int[]{123,264}));
    AddState(264,new State(-24,new int[]{-11,265}));
    AddState(265,new State(new int[]{125,266,134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,14,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(266,new State(-73));
    AddState(267,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,268,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(268,new State(-32));
    AddState(269,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,270,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(270,new State(-33));
    AddState(271,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,272,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(272,new State(-34));
    AddState(273,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,274,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(274,new State(-35));
    AddState(275,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,276,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(276,new State(-36));
    AddState(277,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,278,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(278,new State(-37));
    AddState(279,new State(new int[]{91,280}));
    AddState(280,new State(new int[]{167,19,148,20},new int[]{-35,281,-33,284}));
    AddState(281,new State(new int[]{93,282}));
    AddState(282,new State(new int[]{93,283}));
    AddState(283,new State(-42));
    AddState(284,new State(new int[]{40,285,93,-43}));
    AddState(285,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,131,40,140,45,145,126,146,33,147,41,-92},new int[]{-20,286,-21,92,-22,136,-26,95,-37,61,-38,62,-39,63,-40,68,-41,69,-42,96,-43,97,-44,98,-45,101,-46,106,-47,109,-48,112,-49,116,-50,117,-51,87,-52,88,-53,120,-55,121,-33,137,-54,123,-32,126,-61,143}));
    AddState(286,new State(new int[]{41,287}));
    AddState(287,new State(-44));
    AddState(288,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,289,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(289,new State(-38));
    AddState(290,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,291,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(291,new State(-39));
    AddState(292,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,293,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(293,new State(-40));
    AddState(294,new State(new int[]{134,16,167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159,132,250,160,257,157,262,142,267,129,269,163,271,151,273,147,275,91,279,140,288,133,290,150,292,149,294},new int[]{-12,295,-7,15,-13,41,-24,42,-52,156,-53,120,-55,121,-33,245,-54,123,-32,126,-14,248,-36,249,-5,256,-6,261,-34,277}));
    AddState(295,new State(-41));
    AddState(296,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159},new int[]{-19,297,-24,300,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(297,new State(new int[]{44,298,123,-23}));
    AddState(298,new State(new int[]{167,19,148,20,168,124,166,125,169,127,164,128,159,129,136,130,64,159},new int[]{-24,299,-52,156,-53,120,-55,121,-33,122,-54,123,-32,126}));
    AddState(299,new State(-67));
    AddState(300,new State(-66));
    AddState(301,new State(new int[]{156,7,129,301,145,303,152,305},new int[]{-4,302}));
    AddState(302,new State(-8));
    AddState(303,new State(new int[]{156,7,129,301,145,303,152,305},new int[]{-4,304}));
    AddState(304,new State(-9));
    AddState(305,new State(new int[]{156,7,129,301,145,303,152,305},new int[]{-4,306}));
    AddState(306,new State(-10));

    Rule[] rules=new Rule[178];
    rules[1]=new Rule(-66, new int[]{-65,128});
    rules[2]=new Rule(-65, new int[]{-1});
    rules[3]=new Rule(-1, new int[]{-2});
    rules[4]=new Rule(-2, new int[]{});
    rules[5]=new Rule(-2, new int[]{-2,-3});
    rules[6]=new Rule(-3, new int[]{-4});
    rules[7]=new Rule(-4, new int[]{156,131,-33,-18,123,-11,125});
    rules[8]=new Rule(-4, new int[]{129,-4});
    rules[9]=new Rule(-4, new int[]{145,-4});
    rules[10]=new Rule(-4, new int[]{152,-4});
    rules[11]=new Rule(-5, new int[]{160,-33,-8,59});
    rules[12]=new Rule(-8, new int[]{});
    rules[13]=new Rule(-8, new int[]{91,-9,93});
    rules[14]=new Rule(-8, new int[]{91,-9,127,93});
    rules[15]=new Rule(-8, new int[]{91,127,93});
    rules[16]=new Rule(-9, new int[]{-10});
    rules[17]=new Rule(-9, new int[]{-9,44,-10});
    rules[18]=new Rule(-10, new int[]{160,-33});
    rules[19]=new Rule(-10, new int[]{-24,-33});
    rules[20]=new Rule(-10, new int[]{140,-24,-33});
    rules[21]=new Rule(-10, new int[]{140,-24});
    rules[22]=new Rule(-18, new int[]{});
    rules[23]=new Rule(-18, new int[]{135,-19});
    rules[24]=new Rule(-11, new int[]{});
    rules[25]=new Rule(-11, new int[]{-11,-12});
    rules[26]=new Rule(-12, new int[]{-7});
    rules[27]=new Rule(-12, new int[]{-13});
    rules[28]=new Rule(-12, new int[]{-14});
    rules[29]=new Rule(-12, new int[]{-36});
    rules[30]=new Rule(-12, new int[]{-5});
    rules[31]=new Rule(-12, new int[]{-6});
    rules[32]=new Rule(-12, new int[]{142,-12});
    rules[33]=new Rule(-12, new int[]{129,-12});
    rules[34]=new Rule(-12, new int[]{163,-12});
    rules[35]=new Rule(-12, new int[]{151,-12});
    rules[36]=new Rule(-12, new int[]{147,-12});
    rules[37]=new Rule(-12, new int[]{-34,-12});
    rules[38]=new Rule(-12, new int[]{140,-12});
    rules[39]=new Rule(-12, new int[]{133,-12});
    rules[40]=new Rule(-12, new int[]{150,-12});
    rules[41]=new Rule(-12, new int[]{149,-12});
    rules[42]=new Rule(-34, new int[]{91,91,-35,93,93});
    rules[43]=new Rule(-35, new int[]{-33});
    rules[44]=new Rule(-35, new int[]{-33,40,-20,41});
    rules[45]=new Rule(-7, new int[]{134,-33,59});
    rules[46]=new Rule(-13, new int[]{-24,-33,-25,59});
    rules[47]=new Rule(-13, new int[]{-33,-25,59});
    rules[48]=new Rule(-25, new int[]{});
    rules[49]=new Rule(-25, new int[]{61,-26});
    rules[50]=new Rule(-25, new int[]{-62,-26});
    rules[51]=new Rule(-62, new int[]{176});
    rules[52]=new Rule(-62, new int[]{177});
    rules[53]=new Rule(-62, new int[]{178});
    rules[54]=new Rule(-62, new int[]{179});
    rules[55]=new Rule(-62, new int[]{180});
    rules[56]=new Rule(-62, new int[]{181});
    rules[57]=new Rule(-36, new int[]{132,-33,-8,123,-11,125});
    rules[58]=new Rule(-14, new int[]{-24,-33,-8,40,-15,41,-28});
    rules[59]=new Rule(-15, new int[]{});
    rules[60]=new Rule(-15, new int[]{-16});
    rules[61]=new Rule(-16, new int[]{-17});
    rules[62]=new Rule(-16, new int[]{-16,44,-17});
    rules[63]=new Rule(-17, new int[]{-24,-33});
    rules[64]=new Rule(-28, new int[]{59});
    rules[65]=new Rule(-28, new int[]{-30});
    rules[66]=new Rule(-19, new int[]{-24});
    rules[67]=new Rule(-19, new int[]{-19,44,-24});
    rules[68]=new Rule(-24, new int[]{-52});
    rules[69]=new Rule(-24, new int[]{64,-55,-52});
    rules[70]=new Rule(-27, new int[]{-23});
    rules[71]=new Rule(-27, new int[]{-27,44,-23});
    rules[72]=new Rule(-23, new int[]{-24});
    rules[73]=new Rule(-6, new int[]{157,-33,123,-11,125});
    rules[74]=new Rule(-31, new int[]{});
    rules[75]=new Rule(-31, new int[]{-31,-29});
    rules[76]=new Rule(-29, new int[]{-30});
    rules[77]=new Rule(-29, new int[]{59});
    rules[78]=new Rule(-29, new int[]{-26,59});
    rules[79]=new Rule(-29, new int[]{153,59});
    rules[80]=new Rule(-29, new int[]{153,-26,59});
    rules[81]=new Rule(-29, new int[]{-24,-33,61,-26,59});
    rules[82]=new Rule(-29, new int[]{143,-33,61,-26,59});
    rules[83]=new Rule(-29, new int[]{162,-33,61,-26,59});
    rules[84]=new Rule(-29, new int[]{162,-24,-33,61,-26,59});
    rules[85]=new Rule(-29, new int[]{158,40,-26,41,123,-64,125});
    rules[86]=new Rule(-29, new int[]{139,40,-26,41,-29});
    rules[87]=new Rule(-29, new int[]{138,40,-33,141,-26,41,-29});
    rules[88]=new Rule(-64, new int[]{});
    rules[89]=new Rule(-64, new int[]{-64,-63});
    rules[90]=new Rule(-63, new int[]{130,-26,58,-29});
    rules[91]=new Rule(-30, new int[]{123,-31,125});
    rules[92]=new Rule(-20, new int[]{});
    rules[93]=new Rule(-20, new int[]{-21});
    rules[94]=new Rule(-20, new int[]{-21,44});
    rules[95]=new Rule(-21, new int[]{-22});
    rules[96]=new Rule(-21, new int[]{-21,44,-22});
    rules[97]=new Rule(-22, new int[]{-26});
    rules[98]=new Rule(-22, new int[]{-33,58,-26});
    rules[99]=new Rule(-26, new int[]{-37});
    rules[100]=new Rule(-37, new int[]{-38});
    rules[101]=new Rule(-37, new int[]{-50,61,-37});
    rules[102]=new Rule(-37, new int[]{-50,64,-37});
    rules[103]=new Rule(-38, new int[]{-39});
    rules[104]=new Rule(-38, new int[]{-39,63,-26,58,-38});
    rules[105]=new Rule(-39, new int[]{-40});
    rules[106]=new Rule(-40, new int[]{-41});
    rules[107]=new Rule(-41, new int[]{-42});
    rules[108]=new Rule(-41, new int[]{-41,124,-42});
    rules[109]=new Rule(-42, new int[]{-43});
    rules[110]=new Rule(-42, new int[]{-42,94,-43});
    rules[111]=new Rule(-43, new int[]{-44});
    rules[112]=new Rule(-43, new int[]{-43,38,-44});
    rules[113]=new Rule(-44, new int[]{-45});
    rules[114]=new Rule(-44, new int[]{-44,-56,-45});
    rules[115]=new Rule(-56, new int[]{170});
    rules[116]=new Rule(-56, new int[]{173});
    rules[117]=new Rule(-45, new int[]{-46});
    rules[118]=new Rule(-45, new int[]{-45,-57,-46});
    rules[119]=new Rule(-57, new int[]{60});
    rules[120]=new Rule(-57, new int[]{62});
    rules[121]=new Rule(-57, new int[]{172});
    rules[122]=new Rule(-57, new int[]{171});
    rules[123]=new Rule(-46, new int[]{-47});
    rules[124]=new Rule(-46, new int[]{-46,-58,-47});
    rules[125]=new Rule(-58, new int[]{174});
    rules[126]=new Rule(-58, new int[]{175});
    rules[127]=new Rule(-47, new int[]{-48});
    rules[128]=new Rule(-47, new int[]{-47,-59,-48});
    rules[129]=new Rule(-59, new int[]{43});
    rules[130]=new Rule(-59, new int[]{45});
    rules[131]=new Rule(-48, new int[]{-49});
    rules[132]=new Rule(-48, new int[]{-48,-60,-49});
    rules[133]=new Rule(-60, new int[]{42});
    rules[134]=new Rule(-60, new int[]{47});
    rules[135]=new Rule(-60, new int[]{37});
    rules[136]=new Rule(-49, new int[]{-50});
    rules[137]=new Rule(-50, new int[]{-51});
    rules[138]=new Rule(-50, new int[]{-61,-49});
    rules[139]=new Rule(-61, new int[]{45});
    rules[140]=new Rule(-61, new int[]{126});
    rules[141]=new Rule(-61, new int[]{33});
    rules[142]=new Rule(-51, new int[]{-52});
    rules[143]=new Rule(-51, new int[]{40,-26,41});
    rules[144]=new Rule(-52, new int[]{-53});
    rules[145]=new Rule(-52, new int[]{-52,40,-20,41});
    rules[146]=new Rule(-52, new int[]{64,-55,40,-20,41});
    rules[147]=new Rule(-52, new int[]{-52,91,-27,93});
    rules[148]=new Rule(-52, new int[]{-52,46,-33});
    rules[149]=new Rule(-53, new int[]{-55});
    rules[150]=new Rule(-53, new int[]{-54});
    rules[151]=new Rule(-55, new int[]{-33});
    rules[152]=new Rule(-54, new int[]{168});
    rules[153]=new Rule(-54, new int[]{166});
    rules[154]=new Rule(-54, new int[]{-32});
    rules[155]=new Rule(-54, new int[]{164});
    rules[156]=new Rule(-54, new int[]{159});
    rules[157]=new Rule(-54, new int[]{136});
    rules[158]=new Rule(-32, new int[]{169});
    rules[159]=new Rule(-33, new int[]{167});
    rules[160]=new Rule(-33, new int[]{148,43});
    rules[161]=new Rule(-33, new int[]{148,45});
    rules[162]=new Rule(-33, new int[]{148,42});
    rules[163]=new Rule(-33, new int[]{148,47});
    rules[164]=new Rule(-33, new int[]{148,37});
    rules[165]=new Rule(-33, new int[]{148,60});
    rules[166]=new Rule(-33, new int[]{148,62});
    rules[167]=new Rule(-33, new int[]{148,172});
    rules[168]=new Rule(-33, new int[]{148,171});
    rules[169]=new Rule(-33, new int[]{148,174});
    rules[170]=new Rule(-33, new int[]{148,175});
    rules[171]=new Rule(-33, new int[]{148,170});
    rules[172]=new Rule(-33, new int[]{148,173});
    rules[173]=new Rule(-33, new int[]{148,38});
    rules[174]=new Rule(-33, new int[]{148,124});
    rules[175]=new Rule(-33, new int[]{148,33});
    rules[176]=new Rule(-33, new int[]{148,40,-33,41});
    rules[177]=new Rule(-33, new int[]{148,40,41});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "source_record", "opt_global_decls", 
      "global_decl", "pipeline_decl", "type_slot_decl", "struct_decl", "element_decl", 
      "opt_generic_param_list", "generic_param_list", "generic_param", "opt_member_decls", 
      "member_decl", "property_decl", "method_decl", "opt_param_list", "param_list", 
      "param", "opt_extends", "type_exp_list", "opt_arg_list", "arg_list", "arg", 
      "type_arg", "type_exp", "opt_init", "exp", "type_arg_list", "opt_method_body", 
      "stmt", "block_stmt", "stmts", "string_literal", "identifier", "attribute", 
      "attribute_body", "concept_decl", "assignment_exp", "conditional_exp", 
      "logical_or_exp", "logical_and_exp", "inclusive_or_exp", "exclusive_or_exp", 
      "and_exp", "equality_exp", "relational_exp", "shift_exp", "additive_exp", 
      "multiplicative_exp", "cast_exp", "unary_exp", "paren_exp", "postfix_exp", 
      "primary_exp", "literal_exp", "var_ref", "equality_op", "relational_op", 
      "shift_op", "additive_op", "multiplicative_op", "unary_op", "compound_op", 
      "switch_case", "switch_cases", "start", "$accept", });
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // start -> source_record
#line 224 "Parser.y"
{ _result = ValueStack[ValueStack.Depth-1].sourceRecordVal; }
        break;
      case 3: // source_record -> opt_global_decls
#line 229 "Parser.y"
{ CurrentSemanticValue.sourceRecordVal = new AbsSourceRecord(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].globalDeclListVal); }
        break;
      case 4: // opt_global_decls -> /* empty */
#line 234 "Parser.y"
{ CurrentSemanticValue.globalDeclListVal = new List<AbsGlobalDecl>(); }
        break;
      case 5: // opt_global_decls -> opt_global_decls, global_decl
#line 236 "Parser.y"
{ ValueStack[ValueStack.Depth-2].globalDeclListVal.Add(ValueStack[ValueStack.Depth-1].globalDeclVal); CurrentSemanticValue.globalDeclListVal = ValueStack[ValueStack.Depth-2].globalDeclListVal; }
        break;
      case 6: // global_decl -> pipeline_decl
#line 241 "Parser.y"
{ CurrentSemanticValue.globalDeclVal = ValueStack[ValueStack.Depth-1].globalDeclVal; }
        break;
      case 7: // pipeline_decl -> TOK_SHADER, TOK_CLASS, identifier, opt_extends, '{', 
              //                  opt_member_decls, '}'
#line 246 "Parser.y"
{ CurrentSemanticValue.globalDeclVal = new AbsPipelineDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-5].identifierVal, ValueStack[ValueStack.Depth-4].termListVal, ValueStack[ValueStack.Depth-2].memberDeclListVal); }
        break;
      case 8: // pipeline_decl -> TOK_ABSTRACT, pipeline_decl
#line 248 "Parser.y"
{ CurrentSemanticValue.globalDeclVal = ValueStack[ValueStack.Depth-1].globalDeclVal; CurrentSemanticValue.globalDeclVal.Modifiers |= AbsModifiers.Abstract; }
        break;
      case 9: // pipeline_decl -> TOK_MIXIN, pipeline_decl
#line 250 "Parser.y"
{ CurrentSemanticValue.globalDeclVal = ValueStack[ValueStack.Depth-1].globalDeclVal; CurrentSemanticValue.globalDeclVal.Modifiers |= AbsModifiers.Mixin; }
        break;
      case 10: // pipeline_decl -> TOK_PRIMARY, pipeline_decl
#line 252 "Parser.y"
{ CurrentSemanticValue.globalDeclVal = ValueStack[ValueStack.Depth-1].globalDeclVal; CurrentSemanticValue.globalDeclVal.Modifiers |= AbsModifiers.Primary; }
        break;
      case 11: // type_slot_decl -> TOK_TYPE, identifier, opt_generic_param_list, ';'
#line 258 "Parser.y"
{
#line 259 "Parser.y"
	    var result = new AbsTypeSlotDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].identifierVal);
#line 260 "Parser.y"
		CurrentSemanticValue.memberDeclVal = result;
#line 261 "Parser.y"
		if( ValueStack[ValueStack.Depth-2].genericParamListVal != null )
#line 262 "Parser.y"
			result.GenericParams = ValueStack[ValueStack.Depth-2].genericParamListVal;
#line 263 "Parser.y"
	}
        break;
      case 12: // opt_generic_param_list -> /* empty */
#line 268 "Parser.y"
{ CurrentSemanticValue.genericParamListVal = null; }
        break;
      case 13: // opt_generic_param_list -> '[', generic_param_list, ']'
#line 270 "Parser.y"
{ CurrentSemanticValue.genericParamListVal = ValueStack[ValueStack.Depth-2].genericParamListVal; }
        break;
      case 14: // opt_generic_param_list -> '[', generic_param_list, error, ']'
#line 272 "Parser.y"
{ CurrentSemanticValue.genericParamListVal = ValueStack[ValueStack.Depth-3].genericParamListVal; }
        break;
      case 15: // opt_generic_param_list -> '[', error, ']'
#line 274 "Parser.y"
{ CurrentSemanticValue.genericParamListVal = null; }
        break;
      case 16: // generic_param_list -> generic_param
#line 279 "Parser.y"
{ CurrentSemanticValue.genericParamListVal = new List<AbsGenericParamDecl>{ ValueStack[ValueStack.Depth-1].genericParamVal }; }
        break;
      case 17: // generic_param_list -> generic_param_list, ',', generic_param
#line 281 "Parser.y"
{ CurrentSemanticValue.genericParamListVal = ValueStack[ValueStack.Depth-3].genericParamListVal; CurrentSemanticValue.genericParamListVal.Add(ValueStack[ValueStack.Depth-1].genericParamVal); }
        break;
      case 18: // generic_param -> TOK_TYPE, identifier
#line 286 "Parser.y"
{ CurrentSemanticValue.genericParamVal = new AbsGenericTypeParamDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].identifierVal); }
        break;
      case 19: // generic_param -> type_exp, identifier
#line 288 "Parser.y"
{ CurrentSemanticValue.genericParamVal = new AbsGenericValueParamDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].termVal, ValueStack[ValueStack.Depth-1].identifierVal, false); }
        break;
      case 20: // generic_param -> TOK_IMPLICIT, type_exp, identifier
#line 290 "Parser.y"
{ CurrentSemanticValue.genericParamVal = new AbsGenericValueParamDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].termVal, ValueStack[ValueStack.Depth-1].identifierVal, true); }
        break;
      case 21: // generic_param -> TOK_IMPLICIT, type_exp
#line 292 "Parser.y"
{ CurrentSemanticValue.genericParamVal = new AbsGenericValueParamDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].termVal, identifierFactory.unique("_"), true); }
        break;
      case 22: // opt_extends -> /* empty */
#line 297 "Parser.y"
{ CurrentSemanticValue.termListVal = new List<AbsTerm>(); }
        break;
      case 23: // opt_extends -> TOK_EXTENDS, type_exp_list
#line 299 "Parser.y"
{ CurrentSemanticValue.termListVal = ValueStack[ValueStack.Depth-1].termListVal; }
        break;
      case 24: // opt_member_decls -> /* empty */
#line 304 "Parser.y"
{ CurrentSemanticValue.memberDeclListVal = new List<AbsMemberDecl>(); }
        break;
      case 25: // opt_member_decls -> opt_member_decls, member_decl
#line 306 "Parser.y"
{ ValueStack[ValueStack.Depth-2].memberDeclListVal.Add(ValueStack[ValueStack.Depth-1].memberDeclVal); CurrentSemanticValue.memberDeclListVal = ValueStack[ValueStack.Depth-2].memberDeclListVal; }
        break;
      case 26: // member_decl -> element_decl
#line 311 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; }
        break;
      case 27: // member_decl -> property_decl
#line 313 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; }
        break;
      case 28: // member_decl -> method_decl
#line 315 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; }
        break;
      case 29: // member_decl -> concept_decl
#line 317 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].conceptDeclVal; }
        break;
      case 30: // member_decl -> type_slot_decl
#line 319 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; }
        break;
      case 31: // member_decl -> struct_decl
#line 321 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; }
        break;
      case 32: // member_decl -> TOK_INPUT, member_decl
#line 323 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers  |= AbsModifiers.Input; }
        break;
      case 33: // member_decl -> TOK_ABSTRACT, member_decl
#line 325 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers |= AbsModifiers.Abstract; }
        break;
      case 34: // member_decl -> TOK_VIRTUAL, member_decl
#line 327 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers |= AbsModifiers.Virtual; }
        break;
      case 35: // member_decl -> TOK_OVERRIDE, member_decl
#line 329 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers |= AbsModifiers.Override; }
        break;
      case 36: // member_decl -> TOK_NEW, member_decl
#line 331 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers |= AbsModifiers.New; }
        break;
      case 37: // member_decl -> attribute, member_decl
#line 333 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Attributes.Add( ValueStack[ValueStack.Depth-2].attributeVal ); }
        break;
      case 38: // member_decl -> TOK_IMPLICIT, member_decl
#line 335 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers  |= AbsModifiers.Implicit; }
        break;
      case 39: // member_decl -> TOK_CONCRETE, member_decl
#line 337 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers  |= AbsModifiers.Concrete; }
        break;
      case 40: // member_decl -> TOK_OUTPUT, member_decl
#line 339 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers  |= AbsModifiers.Output; }
        break;
      case 41: // member_decl -> TOK_OPTIONAL, member_decl
#line 341 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = ValueStack[ValueStack.Depth-1].memberDeclVal; CurrentSemanticValue.memberDeclVal.Modifiers  |= AbsModifiers.Optional; }
        break;
      case 42: // attribute -> '[', '[', attribute_body, ']', ']'
#line 346 "Parser.y"
{ CurrentSemanticValue.attributeVal = ValueStack[ValueStack.Depth-3].attributeVal; }
        break;
      case 43: // attribute_body -> identifier
#line 351 "Parser.y"
{ CurrentSemanticValue.attributeVal = new AbsAttribute(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].identifierVal); }
        break;
      case 44: // attribute_body -> identifier, '(', opt_arg_list, ')'
#line 353 "Parser.y"
{ CurrentSemanticValue.attributeVal = new AbsAttribute(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-4].identifierVal, ValueStack[ValueStack.Depth-2].argListVal); }
        break;
      case 45: // element_decl -> TOK_ELEMENT, identifier, ';'
#line 358 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = new AbsElementDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].identifierVal); }
        break;
      case 46: // property_decl -> type_exp, identifier, opt_init, ';'
#line 363 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = new AbsSlotDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].identifierVal, ValueStack[ValueStack.Depth-4].termVal, ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 47: // property_decl -> identifier, opt_init, ';'
#line 365 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = new AbsSlotDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].identifierVal, null, ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 48: // opt_init -> /* empty */
#line 370 "Parser.y"
{ CurrentSemanticValue.termVal = null; }
        break;
      case 49: // opt_init -> '=', exp
#line 372 "Parser.y"
{ CurrentSemanticValue.termVal = ValueStack[ValueStack.Depth-1].termVal; }
        break;
      case 50: // opt_init -> compound_op, exp
#line 374 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), new AbsBaseExp(info(CurrentLocationSpan)), ValueStack[ValueStack.Depth-2].identifierVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 51: // compound_op -> TOK_ADDEQUAL
#line 378 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("+"); }
        break;
      case 52: // compound_op -> TOK_SUBEQUAL
#line 379 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("-"); }
        break;
      case 53: // compound_op -> TOK_MULEQUAL
#line 380 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("*"); }
        break;
      case 54: // compound_op -> TOK_DIVEQUAL
#line 381 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("/"); }
        break;
      case 55: // compound_op -> TOK_ANDEQUAL
#line 382 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("&"); }
        break;
      case 56: // compound_op -> TOK_OREQUAL
#line 383 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("|"); }
        break;
      case 57: // concept_decl -> TOK_CONCEPT, identifier, opt_generic_param_list, '{', 
               //                 opt_member_decls, '}'
#line 388 "Parser.y"
{ CurrentSemanticValue.conceptDeclVal = new AbsConceptDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-5].identifierVal, ValueStack[ValueStack.Depth-4].genericParamListVal, ValueStack[ValueStack.Depth-2].memberDeclListVal); }
        break;
      case 58: // method_decl -> type_exp, identifier, opt_generic_param_list, '(', 
               //                opt_param_list, ')', opt_method_body
#line 393 "Parser.y"
{
#line 394 "Parser.y"
		var result = new AbsMethodDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-6].identifierVal, ValueStack[ValueStack.Depth-7].termVal, ValueStack[ValueStack.Depth-3].paramListVal, ValueStack[ValueStack.Depth-1].stmtVal);
#line 395 "Parser.y"
		CurrentSemanticValue.memberDeclVal = result;
#line 396 "Parser.y"
		if( ValueStack[ValueStack.Depth-5].genericParamListVal != null )
#line 397 "Parser.y"
			result.GenericParams = ValueStack[ValueStack.Depth-5].genericParamListVal;
#line 398 "Parser.y"
    }
        break;
      case 59: // opt_param_list -> /* empty */
#line 403 "Parser.y"
{ CurrentSemanticValue.paramListVal = new List<AbsParamDecl>(); }
        break;
      case 61: // param_list -> param
#line 409 "Parser.y"
{ CurrentSemanticValue.paramListVal = new List<AbsParamDecl>{ ValueStack[ValueStack.Depth-1].paramVal }; }
        break;
      case 62: // param_list -> param_list, ',', param
#line 411 "Parser.y"
{ CurrentSemanticValue.paramListVal = ValueStack[ValueStack.Depth-3].paramListVal; CurrentSemanticValue.paramListVal.Add(ValueStack[ValueStack.Depth-1].paramVal); }
        break;
      case 63: // param -> type_exp, identifier
#line 416 "Parser.y"
{ CurrentSemanticValue.paramVal = new AbsParamDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].identifierVal, ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 64: // opt_method_body -> ';'
#line 421 "Parser.y"
{ CurrentSemanticValue.stmtVal = null; }
        break;
      case 66: // type_exp_list -> type_exp
#line 427 "Parser.y"
{ CurrentSemanticValue.termListVal = new List<AbsTerm>{ ValueStack[ValueStack.Depth-1].termVal }; }
        break;
      case 67: // type_exp_list -> type_exp_list, ',', type_exp
#line 429 "Parser.y"
{ ValueStack[ValueStack.Depth-3].termListVal.Add(ValueStack[ValueStack.Depth-1].termVal); CurrentSemanticValue.termListVal = ValueStack[ValueStack.Depth-3].termListVal; }
        break;
      case 68: // type_exp -> postfix_exp
#line 434 "Parser.y"
{ CurrentSemanticValue.termVal = ValueStack[ValueStack.Depth-1].termVal; }
        break;
      case 69: // type_exp -> '@', var_ref, postfix_exp
#line 436 "Parser.y"
{
#line 437 "Parser.y"
        Tag(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-2]), TokenType.Frequency);
#line 438 "Parser.y"
        CurrentSemanticValue.termVal = new AbsFreqQualTerm(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].termVal, ValueStack[ValueStack.Depth-1].termVal);
#line 439 "Parser.y"
    }
        break;
      case 70: // type_arg_list -> type_arg
#line 444 "Parser.y"
{ CurrentSemanticValue.argListVal = new List<AbsArg>(); CurrentSemanticValue.argListVal.Add(ValueStack[ValueStack.Depth-1].argVal); }
        break;
      case 71: // type_arg_list -> type_arg_list, ',', type_arg
#line 446 "Parser.y"
{ CurrentSemanticValue.argListVal = ValueStack[ValueStack.Depth-3].argListVal; CurrentSemanticValue.argListVal.Add(ValueStack[ValueStack.Depth-1].argVal); }
        break;
      case 72: // type_arg -> type_exp
#line 451 "Parser.y"
{ CurrentSemanticValue.argVal = new AbsPositionalArg(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].termVal); }
        break;
      case 73: // struct_decl -> TOK_STRUCT, identifier, '{', opt_member_decls, '}'
#line 456 "Parser.y"
{ CurrentSemanticValue.memberDeclVal = new AbsStructDecl(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-4].identifierVal, ValueStack[ValueStack.Depth-2].memberDeclListVal); }
        break;
      case 74: // stmts -> /* empty */
#line 461 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsEmptyStmt(info(CurrentLocationSpan)); }
        break;
      case 75: // stmts -> stmts, stmt
#line 463 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsSeqStmt(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].stmtVal, ValueStack[ValueStack.Depth-1].stmtVal); }
        break;
      case 77: // stmt -> ';'
#line 469 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsEmptyStmt(info(CurrentLocationSpan)); }
        break;
      case 78: // stmt -> exp, ';'
#line 471 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsExpStmt(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 79: // stmt -> TOK_RETURN, ';'
#line 473 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsReturnStmt(info(CurrentLocationSpan)); }
        break;
      case 80: // stmt -> TOK_RETURN, exp, ';'
#line 475 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsReturnStmt(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 81: // stmt -> type_exp, identifier, '=', exp, ';'
#line 477 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsLetStmt(info(CurrentLocationSpan), AbsLetFlavor.Value, ValueStack[ValueStack.Depth-5].termVal, ValueStack[ValueStack.Depth-4].identifierVal, ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 82: // stmt -> TOK_LET, identifier, '=', exp, ';'
#line 479 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsLetStmt(info(CurrentLocationSpan), AbsLetFlavor.Value, null, ValueStack[ValueStack.Depth-4].identifierVal, ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 83: // stmt -> TOK_VAR, identifier, '=', exp, ';'
#line 481 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsLetStmt(info(CurrentLocationSpan), AbsLetFlavor.Variable, null, ValueStack[ValueStack.Depth-4].identifierVal, ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 84: // stmt -> TOK_VAR, type_exp, identifier, '=', exp, ';'
#line 483 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsLetStmt(info(CurrentLocationSpan), AbsLetFlavor.Variable, ValueStack[ValueStack.Depth-5].termVal, ValueStack[ValueStack.Depth-4].identifierVal, ValueStack[ValueStack.Depth-2].termVal); }
        break;
      case 85: // stmt -> TOK_SWITCH, '(', exp, ')', '{', switch_cases, '}'
#line 485 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsSwitchStmt(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-5].termVal, ValueStack[ValueStack.Depth-2].caseListVal); }
        break;
      case 86: // stmt -> TOK_IF, '(', exp, ')', stmt
#line 487 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsIfStmt(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-1].stmtVal, null); }
        break;
      case 87: // stmt -> TOK_FOR, '(', identifier, TOK_IN, exp, ')', stmt
#line 489 "Parser.y"
{ CurrentSemanticValue.stmtVal = new AbsForStmt(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-5].identifierVal, ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-1].stmtVal); }
        break;
      case 88: // switch_cases -> /* empty */
#line 494 "Parser.y"
{ CurrentSemanticValue.caseListVal = new List<AbsCase>(); }
        break;
      case 89: // switch_cases -> switch_cases, switch_case
#line 496 "Parser.y"
{ CurrentSemanticValue.caseListVal = ValueStack[ValueStack.Depth-2].caseListVal; CurrentSemanticValue.caseListVal.Add(ValueStack[ValueStack.Depth-1].caseVal); }
        break;
      case 90: // switch_case -> TOK_CASE, exp, ':', stmt
#line 501 "Parser.y"
{ CurrentSemanticValue.caseVal = new AbsCase(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-1].stmtVal); }
        break;
      case 91: // block_stmt -> '{', stmts, '}'
#line 506 "Parser.y"
{ CurrentSemanticValue.stmtVal = ValueStack[ValueStack.Depth-2].stmtVal; }
        break;
      case 92: // opt_arg_list -> /* empty */
#line 511 "Parser.y"
{ CurrentSemanticValue.argListVal = new List<AbsArg>(); }
        break;
      case 93: // opt_arg_list -> arg_list
#line 513 "Parser.y"
{ CurrentSemanticValue.argListVal = ValueStack[ValueStack.Depth-1].argListVal; }
        break;
      case 94: // opt_arg_list -> arg_list, ','
#line 515 "Parser.y"
{ CurrentSemanticValue.argListVal = ValueStack[ValueStack.Depth-2].argListVal; }
        break;
      case 95: // arg_list -> arg
#line 520 "Parser.y"
{ CurrentSemanticValue.argListVal = new List<AbsArg>{ ValueStack[ValueStack.Depth-1].argVal }; }
        break;
      case 96: // arg_list -> arg_list, ',', arg
#line 522 "Parser.y"
{ CurrentSemanticValue.argListVal = ValueStack[ValueStack.Depth-3].argListVal; CurrentSemanticValue.argListVal.Add(ValueStack[ValueStack.Depth-1].argVal); }
        break;
      case 97: // arg -> exp
#line 527 "Parser.y"
{ CurrentSemanticValue.argVal = new AbsPositionalArg( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].termVal); }
        break;
      case 98: // arg -> identifier, ':', exp
#line 529 "Parser.y"
{ CurrentSemanticValue.argVal = new AbsKeywordArg( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].identifierVal, ValueStack[ValueStack.Depth-1].termVal); }
        break;
      case 99: // exp -> assignment_exp
#line 534 "Parser.y"
{ CurrentSemanticValue.termVal = ValueStack[ValueStack.Depth-1].termVal; }
        break;
      case 101: // assignment_exp -> unary_exp, '=', assignment_exp
#line 540 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsAssign( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-1].termVal); }
        break;
      case 102: // assignment_exp -> unary_exp, '@', assignment_exp
#line 542 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsApp(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, new AbsArg[]{ new AbsPositionalArg(info(LocationStack[LocationStack.Depth-1]), ValueStack[ValueStack.Depth-1].termVal) } ); }
        break;
      case 104: // conditional_exp -> logical_or_exp, '?', exp, ':', conditional_exp
#line 567 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsIfTerm( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-5].termVal, ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 108: // inclusive_or_exp -> inclusive_or_exp, '|', exclusive_or_exp
#line 587 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, "|", ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 110: // exclusive_or_exp -> exclusive_or_exp, '^', and_exp
#line 593 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, "^", ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 112: // and_exp -> and_exp, '&', equality_exp
#line 599 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, "&", ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 114: // equality_exp -> equality_exp, equality_op, relational_exp
#line 605 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-2].identifierVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 115: // equality_op -> TOK_EQUALEQUAL
#line 610 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("=="); }
        break;
      case 116: // equality_op -> TOK_NOTEQUAL
#line 612 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("!="); }
        break;
      case 118: // relational_exp -> relational_exp, relational_op, shift_exp
#line 618 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-2].identifierVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 119: // relational_op -> '<'
#line 623 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("<"); }
        break;
      case 120: // relational_op -> '>'
#line 625 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op(">"); }
        break;
      case 121: // relational_op -> TOK_LESSEQUAL
#line 627 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("<="); }
        break;
      case 122: // relational_op -> TOK_GREATEREQUAL
#line 629 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op(">="); }
        break;
      case 124: // shift_exp -> shift_exp, shift_op, additive_exp
#line 635 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-2].identifierVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 125: // shift_op -> TOK_SHIFT_LEFT
#line 640 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("<<"); }
        break;
      case 126: // shift_op -> TOK_SHIFT_RIGHT
#line 642 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op(">>"); }
        break;
      case 128: // additive_exp -> additive_exp, additive_op, multiplicative_exp
#line 648 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-2].identifierVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 129: // additive_op -> '+'
#line 653 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("+"); }
        break;
      case 130: // additive_op -> '-'
#line 655 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("-"); }
        break;
      case 132: // multiplicative_exp -> multiplicative_exp, multiplicative_op, cast_exp
#line 661 "Parser.y"
{ CurrentSemanticValue.termVal = BinOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-2].identifierVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 133: // multiplicative_op -> '*'
#line 666 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("*"); }
        break;
      case 134: // multiplicative_op -> '/'
#line 668 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("/"); }
        break;
      case 135: // multiplicative_op -> '%'
#line 670 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("%"); }
        break;
      case 138: // unary_exp -> unary_op, cast_exp
#line 684 "Parser.y"
{ CurrentSemanticValue.termVal = UnOp( info(CurrentLocationSpan), ValueStack[ValueStack.Depth-2].identifierVal, ValueStack[ValueStack.Depth-1].termVal ); }
        break;
      case 139: // unary_op -> '-'
#line 689 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("-"); }
        break;
      case 140: // unary_op -> '~'
#line 691 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("~"); }
        break;
      case 141: // unary_op -> '!'
#line 693 "Parser.y"
{ CurrentSemanticValue.identifierVal = Op("!"); }
        break;
      case 142: // paren_exp -> postfix_exp
#line 698 "Parser.y"
{ CurrentSemanticValue.termVal = ValueStack[ValueStack.Depth-1].termVal; }
        break;
      case 143: // paren_exp -> '(', exp, ')'
#line 700 "Parser.y"
{ CurrentSemanticValue.termVal = ValueStack[ValueStack.Depth-2].termVal; }
        break;
      case 145: // postfix_exp -> postfix_exp, '(', opt_arg_list, ')'
#line 706 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsApp(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-4].termVal, ValueStack[ValueStack.Depth-2].argListVal); }
        break;
      case 146: // postfix_exp -> '@', var_ref, '(', opt_arg_list, ')'
#line 708 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsApp(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-4].termVal, ValueStack[ValueStack.Depth-2].argListVal); }
        break;
      case 147: // postfix_exp -> postfix_exp, '[', type_arg_list, ']'
#line 710 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsGenericApp(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-4].termVal, ValueStack[ValueStack.Depth-2].argListVal); }
        break;
      case 148: // postfix_exp -> postfix_exp, '.', identifier
#line 712 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsMemberRef(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-3].termVal, ValueStack[ValueStack.Depth-1].identifierVal); }
        break;
      case 149: // primary_exp -> var_ref
#line 717 "Parser.y"
{ CurrentSemanticValue.termVal = ValueStack[ValueStack.Depth-1].termVal; }
        break;
      case 150: // primary_exp -> literal_exp
#line 719 "Parser.y"
{ CurrentSemanticValue.termVal = ValueStack[ValueStack.Depth-1].termVal; }
        break;
      case 151: // var_ref -> identifier
#line 724 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsVarRef(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].identifierVal); }
        break;
      case 152: // literal_exp -> TOK_INTEGER_LITERAL
#line 729 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsLit<Int32>(info(CurrentLocationSpan), (Int32) ValueStack[ValueStack.Depth-1].intVal); }
        break;
      case 153: // literal_exp -> TOK_FLOAT_LITERAL
#line 731 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsLit<Double>(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].floatVal); }
        break;
      case 154: // literal_exp -> string_literal
#line 733 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsLit<String>(info(CurrentLocationSpan), ValueStack[ValueStack.Depth-1].stringVal); }
        break;
      case 155: // literal_exp -> TOK_VOID
#line 735 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsVoid(info(CurrentLocationSpan)); }
        break;
      case 156: // literal_exp -> TOK_TRUE
#line 737 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsLit<bool>(info(CurrentLocationSpan), true); }
        break;
      case 157: // literal_exp -> TOK_FALSE
#line 739 "Parser.y"
{ CurrentSemanticValue.termVal = new AbsLit<bool>(info(CurrentLocationSpan), false); }
        break;
      case 159: // identifier -> TOK_IDENTIFIER
#line 748 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.simpleIdentifier(ValueStack[ValueStack.Depth-1].stringVal); }
        break;
      case 160: // identifier -> TOK_OPERATOR, '+'
#line 750 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("+"); }
        break;
      case 161: // identifier -> TOK_OPERATOR, '-'
#line 752 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("-"); }
        break;
      case 162: // identifier -> TOK_OPERATOR, '*'
#line 754 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("*"); }
        break;
      case 163: // identifier -> TOK_OPERATOR, '/'
#line 756 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("/"); }
        break;
      case 164: // identifier -> TOK_OPERATOR, '%'
#line 758 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("%"); }
        break;
      case 165: // identifier -> TOK_OPERATOR, '<'
#line 760 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("<"); }
        break;
      case 166: // identifier -> TOK_OPERATOR, '>'
#line 762 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier(">"); }
        break;
      case 167: // identifier -> TOK_OPERATOR, TOK_LESSEQUAL
#line 764 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("<="); }
        break;
      case 168: // identifier -> TOK_OPERATOR, TOK_GREATEREQUAL
#line 766 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier(">="); }
        break;
      case 169: // identifier -> TOK_OPERATOR, TOK_SHIFT_LEFT
#line 768 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("<<"); }
        break;
      case 170: // identifier -> TOK_OPERATOR, TOK_SHIFT_RIGHT
#line 770 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier(">>"); }
        break;
      case 171: // identifier -> TOK_OPERATOR, TOK_EQUALEQUAL
#line 772 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("=="); }
        break;
      case 172: // identifier -> TOK_OPERATOR, TOK_NOTEQUAL
#line 774 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("!="); }
        break;
      case 173: // identifier -> TOK_OPERATOR, '&'
#line 776 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("&"); }
        break;
      case 174: // identifier -> TOK_OPERATOR, '|'
#line 778 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("|"); }
        break;
      case 175: // identifier -> TOK_OPERATOR, '!'
#line 780 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("!"); }
        break;
      case 176: // identifier -> TOK_OPERATOR, '(', identifier, ')'
#line 782 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier((ValueStack[ValueStack.Depth-2].identifierVal).ToString()); }
        break;
      case 177: // identifier -> TOK_OPERATOR, '(', ')'
#line 784 "Parser.y"
{ CurrentSemanticValue.identifierVal = identifierFactory.operatorIdentifier("()"); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
